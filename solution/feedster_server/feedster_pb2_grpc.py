# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import feedster_pb2 as feedster__pb2


class ParserStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Download = channel.unary_unary(
            '/Parser/Download',
            request_serializer=feedster__pb2.FeedParsingRequest.SerializeToString,
            response_deserializer=feedster__pb2.FeedParsingResponse.FromString,
        )


class ParserServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Download(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ParserServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Download': grpc.unary_unary_rpc_method_handler(
            servicer.Download,
            request_deserializer=feedster__pb2.FeedParsingRequest.FromString,
            response_serializer=feedster__pb2.FeedParsingResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Parser', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Parser(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Download(request,
                 target,
                 options=(),
                 channel_credentials=None,
                 call_credentials=None,
                 compression=None,
                 wait_for_ready=None,
                 timeout=None,
                 metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Parser/Download',
                                             feedster__pb2.FeedParsingRequest.SerializeToString,
                                             feedster__pb2.FeedParsingResponse.FromString,
                                             options, channel_credentials,
                                             call_credentials, compression, wait_for_ready, timeout, metadata)
